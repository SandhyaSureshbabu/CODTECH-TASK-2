import tensorflow as tf
from tensorflow.keras import layers, models
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.applications import VGG16
from tensorflow.keras.optimizers import Adam

# Load and preprocess the dataset
def load_preprocess_data():
    (train_images, train_labels), (test_images, test_labels) = tf.keras.datasets.cifar10.load_data()
    train_images, test_images = train_images / 255.0, test_images / 255.0  # Normalize pixel values
    return train_images, train_labels, test_images, test_labels

# Data augmentation
def augment_data(train_images):
    datagen = ImageDataGenerator(
        rotation_range=20,
        width_shift_range=0.2,
        height_shift_range=0.2,
        horizontal_flip=True
    )
    datagen.fit(train_images)
    return datagen

# Designing the CNN architecture
def build_model():
    base_model = VGG16(weights='imagenet', include_top=False, input_shape=(32, 32, 3))
    base_model.trainable = False  # Freeze the base model

    model = models.Sequential()
    model.add(base_model)
    model.add(layers.Flatten())
    model.add(layers.Dense(256, activation='relu'))
    model.add(layers.Dropout(0.5))
    model.add(layers.Dense(10, activation='softmax'))

    return model

# Compile and train the model
def train_model(model, datagen, train_images, train_labels, test_images, test_labels):
    model.compile(optimizer=Adam(learning_rate=1e-4),
                  loss='sparse_categorical_crossentropy',
                  metrics=['accuracy'])

    history = model.fit(datagen.flow(train_images, train_labels, batch_size=64),
                        epochs=50,
                        validation_data=(test_images, test_labels))

    return history

# Main function to execute the steps
def main():
    train_images, train_labels, test_images, test_labels = load_preprocess_data()
    datagen = augment_data(train_images)
    model = build_model()
    history = train_model(model, datagen, train_images, train_labels, test_images, test_labels)
    model.save('cnn_image_recognition_model.h5')

if __name__ == '__main__':
    main()
